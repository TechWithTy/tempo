#!/usr/bin/env python
"""
Test the connection between the FastAPI app and OpenTelemetry collector.

This script:
1. Creates traces similar to those generated by the FastAPI app
2. Sends them directly to the OpenTelemetry collector
3. Verifies the collector receives them by checking logs response
4. Provides clear success/failure indications

Usage:
    poetry run python -m app.core.tempo._tests.test_app_to_otel
"""

import os
import sys
import time
import uuid
import logging
import grpc
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger("app-to-otel-test")

try:
    # Import OpenTelemetry libraries
    import requests
    from opentelemetry import trace
    from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
    from opentelemetry.sdk.resources import Resource
    from opentelemetry.sdk.trace import TracerProvider
    from opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter
except ImportError:
    logger.error("Required packages not found. Please run: poetry add opentelemetry-api opentelemetry-sdk opentelemetry-exporter-otlp requests")
    sys.exit(1)


def check_otel_collector_health(host="localhost", port=13133):
    """Check if the OpenTelemetry collector's health endpoint is accessible"""
    try:
        response = requests.get(f"http://{host}:{port}")
        if response.status_code == 200:
            return True, response.text
        else:
            return False, f"Status code: {response.status_code}"
    except Exception as e:
        return False, str(e)


def send_test_traces(endpoint, num_traces=3, service_name="app-to-otel-test"):
    """
    Send test traces to the OpenTelemetry collector.
    
    Args:
        endpoint: The OTLP endpoint (e.g., "localhost:4317")
        num_traces: Number of trace groups to send
        service_name: Service name to use for the traces
        
    Returns:
        tuple: (success, details)
    """
    # Create a unique test ID for this run
    test_id = f"test-{datetime.now().strftime('%Y%m%d%H%M%S')}"
    trace_ids = []
    
    try:
        # Configure resource with service info
        resource = Resource.create({
            "service.name": service_name,
            "test.id": test_id,
            "test.timestamp": datetime.now().isoformat(),
        })
        
        # Set up the tracer provider
        provider = TracerProvider(resource=resource)
        trace.set_tracer_provider(provider)
        
        # Add console exporter to see traces in console
        console_exporter = ConsoleSpanExporter()
        provider.add_span_processor(BatchSpanProcessor(console_exporter))
        
        # Create OTLP exporter
        logger.info(f"Creating exporter with endpoint: {endpoint}")
        otlp_exporter = OTLPSpanExporter(
            endpoint=endpoint,
            insecure=True, 
            # Increase timeout for troubleshooting
            timeout=20
        )
        
        # Add the exporter to the provider
        span_processor = BatchSpanProcessor(otlp_exporter)
        provider.add_span_processor(span_processor)
        
        # Get a tracer
        tracer = trace.get_tracer(service_name)
        
        # Create multiple traces with parent-child structure like a real app
        for i in range(num_traces):
            # Create a unique ID for each trace group
            trace_group_id = str(uuid.uuid4())
            
            with tracer.start_as_current_span(f"api-request-{i}") as parent:
                parent.set_attribute("test.group_id", trace_group_id)
                parent.set_attribute("test.endpoint", endpoint)
                parent.set_attribute("http.method", "GET")
                parent.set_attribute("http.url", f"/api/test/{i}")
                
                trace_id = format(parent.get_span_context().trace_id, '032x')
                trace_ids.append(trace_id)
                logger.info(f"Created parent span with trace ID: {trace_id}")
                
                # Add database span
                with tracer.start_as_current_span("database-query") as child1:
                    child1.set_attribute("db.system", "postgresql")
                    child1.set_attribute("db.operation", "SELECT")
                    time.sleep(0.05)  # Simulate work
                
                # Add external API call span
                with tracer.start_as_current_span("external-api-call") as child2:
                    child2.set_attribute("http.method", "POST")
                    child2.set_attribute("http.url", "https://api.example.com/data")
                    time.sleep(0.05)  # Simulate work
                    
                    # Add further nested span
                    with tracer.start_as_current_span("process-response") as grandchild:
                        grandchild.set_attribute("process.name", "json_parser")
                        time.sleep(0.05)  # Simulate work
        
        # Wait briefly and then force flush to ensure traces are exported
        time.sleep(0.5)
        logger.info("Flushing traces...")
        provider.force_flush()
        
        # Explicitly shutdown provider (should be done in real system)
        provider.shutdown()
        logger.info(f"Test complete. Sent {num_traces} traces to {endpoint}")
        
        return True, {
            "trace_ids": trace_ids,
            "test_id": test_id,
            "service_name": service_name,
            "endpoint": endpoint,
        }
        
    except grpc.RpcError as rpc_error:
        return False, f"gRPC error: {rpc_error.code()}: {rpc_error.details()}"
    except Exception as e:
        return False, f"Error sending traces: {str(e)}"


def main():
    """Main test function."""
    print("\n" + "=" * 80)
    print(" FastAPI App to OpenTelemetry Collector Connection Test")
    print("=" * 80)
    
    # Check if collector is running
    collector_health, health_details = check_otel_collector_health()
    logger.info(f"OpenTelemetry collector health check: {'PASS' if collector_health else 'FAIL'}")
    
    if not collector_health:
        logger.error(f"Failed to connect to health endpoint: {health_details}")
        logger.info("Make sure the OpenTelemetry collector is running (docker-compose -f docker-compose.monitoring.yml ps)")
        sys.exit(1)
    
    # Try both the Docker service name and localhost with mapped port
    endpoints = [
        "localhost:4317",     # Direct to host-mapped collector port
        "otel-collector:4317" # For containerized apps
    ]
    
    success = False
    results = {}
    
    for endpoint in endpoints:
        logger.info(f"\nTesting with endpoint: {endpoint}")
        endpoint_success, details = send_test_traces(endpoint)
        
        if endpoint_success:
            success = True
            results[endpoint] = details
            logger.info(f"✅ Successfully sent traces to {endpoint}")
            
            # Print some helpful info
            if isinstance(details, dict) and "trace_ids" in details:
                logger.info(f"Generated trace IDs: {', '.join(details['trace_ids'][:2])}...")
            
        else:
            logger.warning(f"❌ Failed to send traces to {endpoint}: {details}")
    
    # Final status
    print("\n" + "=" * 80)
    if success:
        logger.info("✅ TEST PASSED: Successfully sent traces to at least one endpoint")
        logger.info(f"Service name used: {list(results.values())[0]['service_name']}")
        logger.info("To verify, check collector logs: docker logs otel-collector")
        logger.info("Look for log entries containing the trace IDs or service name")
    else:
        logger.error("❌ TEST FAILED: Could not send traces to any endpoint")
        logger.info("Troubleshooting steps:")
        logger.info("1. Check if otel-collector container is running")
        logger.info("2. Verify the ports are correctly mapped in docker-compose.monitoring.yml")
        logger.info("3. Check collector logs for errors: docker logs otel-collector")
    
    print("=" * 80)


if __name__ == "__main__":
    main()
